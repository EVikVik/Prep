# Опишите, как бы вы использовали один одномерный массив для реализации трех стеков.
# Подсказки: 2, 12, 38, 58

class MultiStack:

    def __init__(self, stacksize):
        self.numstacks = 3
        self.array = [0] * (stacksize * self.numstacks)
        self.sizes = [0] * self.numstacks
        self.stacksize = stacksize

    def Push(self, item, stacknum):
        if self.IsFull(stacknum):
            raise Exception('Stack is full')
        self.sizes[stacknum] += 1
        self.array[self.IndexOfTop(stacknum)] = item

    def Pop(self, stacknum):
        if self.IsEmpty(stacknum):
            raise Exception('Stack is empty')
        value = self.array[self.IndexOfTop(stacknum)]
        self.array[self.IndexOfTop(stacknum)] = 0
        self.sizes[stacknum] -= 1
        return value

    def Peek(self, stacknum):
        if self.IsEmpty(stacknum):
            raise Exception('Stack is empty')
        return self.array[self.IndexOfTop(stacknum)]

    def IsEmpty(self, stacknum):
        return self.sizes[stacknum] == 0

    def IsFull(self, stacknum):
        return self.sizes[stacknum] == self.stacksize

    def IndexOfTop(self, stacknum):
        offset = stacknum * self.stacksize
        return offset + self.sizes[stacknum] - 1


class MultiStack_2:
    def __init__(self, size):
        self.__size = size
        self.__stack = [0]*3*size
        self.__indexes = [0, size, 2*size]

    def IsEmpty(self, num):
        return self.__indexes[num] == num*self.__size

    def Push(self, value, num):
        if self.IsFull(num):
            raise Exception("The stack is full!")
        self.__stack[self.__indexes[num]] = value
        self.__indexes[num] += 1

    def Peek(self, num):
        return self.__stack[self.__indexes[num]-1]

    def Pop(self, num):
        if self.IsEmpty(num):
            raise Exception("The stack is empty!")
        value = self.__stack[self.__indexes[num]-1]
        self.__stack[self.__indexes[num]] = 0
        self.__indexes[num] -= 1
        return value

    def IsFull(self, num):
        return self.__indexes[num]-1 == (num+1)*self.__size

def ThreeInOne():
    newstack = MultiStack_2(2)
    print(newstack.IsEmpty(1))
    newstack.Push(3, 1)
    print(newstack.Peek(1))
    print(newstack.IsEmpty(1))
    newstack.Push(2, 1)
    print(newstack.Peek(1))
    print(newstack.Pop(1))
    print(newstack.Peek(1))
    newstack.Push(3, 1)

ThreeInOne()
