# Напишите код для удаления дубликатов из несортированного связного списка.
# Дополнительно
# Как вы будете решать задачу, если использовать временный буфер запрещено?
# Подсказки: 9, 40

class Node:
    def __init__(self, value):
        self.data = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.current_node = None
        self.root = None

    def generate(self, values):
        for value in values:
            node = Node(value)
            if self.current_node:
                self.current_node.next = node
            else:
                self.root = node
            self.current_node = node

    def root(self):
        return self.root
        
ll = LinkedList()
ll.generate([1, 2, 3, 1, 1, 3, 4])

print(ll.root.data)
print(ll.root.next.data)
print(ll.root.next.next.data)
print(ll.root.next.next.next.data)
print('---------------------------')

def delete_duplicate(root):
    if not root:
        return
    
    cur_node = root
    prev_node = root

    have_been_seen = set()

    while cur_node.next:
        if cur_node.data in have_been_seen:
            prev_node.next = cur_node.next
        else:
            prev_node = cur_node
            have_been_seen.add(cur_node.data)
        cur_node = cur_node.next

# delete_duplicate(ll.root)

def followup(root):
    if not root:
        return

    cur_node = root

    while cur_node:
        print("cur:", cur_node.data)
        runner = cur_node.next
        prev   = cur_node
        
        while runner:
            print("runner:", runner.data)
            if cur_node.data == runner.data:
                print('found: it was', prev.next.data)
                prev.next = runner.next
                print('found: it is ', prev.next.data)
            else:
                prev = runner
            runner = runner.next
        cur_node = cur_node.next

        
followup(ll.root)

print(ll.root.data)
print(ll.root.next.data)
print(ll.root.next.next.data)
print(ll.root.next.next.next.data)
    
