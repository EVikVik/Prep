def is_superbalanced(root_node):
    
    node_and_bound_stack = [(root_node, -float('inf'), float('inf'))]
    
    while node_and_bound_stack:
        node, lower, upper = node_and_bound_stack.pop()
        print("node.value:", node.value)
        print("node.left:", node.left)
        print("node.right:", node.right)
        print("lower:", lower)
        print("upper:", upper)
        
        if node.value<lower or node.value>upper:
            return False
        
        if node.left:
            node_and_bound_stack.append((node.left, lower, node.value))
            
        if node.right:
            node_and_bound_stack.append((node.right, node.value, upper))
    
    return True
    
class BinaryTree(object):

    def __init__(self, value):
        self.value = value
        self.left  = None
        self.right = None

    def insert_left(self, node):
        self.left = node
        return self.left.left

    def insert_right(self, node):
        self.right = node
        return self.right.right
    
node_1 = BinaryTree(1)
node_5 = BinaryTree(5)
node_6 = BinaryTree(6)

node_2 = BinaryTree(2)
node_2.insert_left(node_1)

node_4 = BinaryTree(4)
node_4.insert_right(node_5)

node_3 = BinaryTree(3)
node_3.insert_left(node_2)
node_3.insert_right(node_4)

root = node_3
print(is_superbalanced(root))
